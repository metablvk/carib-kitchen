import Head from 'next/head';
import styles from './../styles/cart.module.css';
import Layout from '../components/layout/layout.component';
import { useSelector, useDispatch } from 'react-redux';
import { useRouter } from 'next/router';
import {
  selectCartItems,
  selectCartTotal,
} from './../store/cart/cart.selector';

import CartItem from '../components/cart-item/cart-item.component';

import { selectCurrentUser } from '../store/user/user.selector';
import { createOrder, getOrder } from '../utils/firebase';
import { selectCurrentOrders } from '../store/orders/orders.selector';
import { setCurrentOrders } from '../store/orders/orders.action';
import { clearCart, clearItemFromCart } from '../store/cart/cart.action';
import Link from 'next/link';

const Cart = () => {
  const dispatch = useDispatch();
  const currentOrders = useSelector(selectCurrentOrders);
  const cartItems = useSelector(selectCartItems);
  const cartTotal = useSelector(selectCartTotal);
  const currentUser = useSelector(selectCurrentUser);
  const router = useRouter();
  const handleCreateOrder = async () => {
    try {
      const orderId = await createOrder(
        cartItems,
        currentUser.uid,
        Number((cartTotal * 0.05 + cartTotal).toFixed(2))
      );
      await handleGetOrder(orderId);
    } catch (e) {
      console.log(e);
    }
  };
  const handleGetOrder = async (orderId: string) => {
    const order = await getOrder(orderId);
    dispatch(setCurrentOrders([...currentOrders, order]));
    dispatch(clearCart());
    if (order) {
      router.push('orders');
    }
  };
  return (
    <>
      <Layout>
        <Head>
          <title>Jamrock Kitchen | Cart</title>
          <meta name='description' content='Generated by create next app' />
          <meta name='viewport' content='width=device-width, initial-scale=1' />
          <link rel='icon' href='/favicon.ico' />
        </Head>
        <section className={`container ${styles.cart}`}>
          {/* <h1>Cart</h1>
          <p>Cart Total: ${cartTotal.toFixed(2)}</p> */}
          <section>
            {cartItems.map((cartItem: any, id: number) => {
              return <CartItem key={id} cartItem={cartItem} id={id} />;
            })}
          </section>
          <section className={styles.cart_total}>
            <div>
              <h1>Cart</h1>
              <p>
                Cart Total:{' '}
                <span className={styles.cost}>${cartTotal.toFixed(2)}</span>
              </p>
              <p>
                Total GST:{' '}
                <span className={styles.cost}>
                  ${(cartTotal * 0.05).toFixed(2)}
                </span>
              </p>
              <p>
                Final Total:{' '}
                <span className={styles.cost}>
                  ${(cartTotal * 0.05 + cartTotal).toFixed(2)}
                </span>
              </p>
            </div>
            <div>
              {currentUser ? (
                <button onClick={handleCreateOrder}>Check Out</button>
              ) : (
                <p>
                  <Link href='/login'>
                    <button>Login To Checkout</button>
                  </Link>
                </p>
              )}
            </div>
          </section>
        </section>
      </Layout>
    </>
  );
};

export default Cart;
